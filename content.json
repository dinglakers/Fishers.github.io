{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://dinglakers.github.io","root":"/fishers/"},"pages":[],"posts":[{"title":"在windows下如何安装nginx","slug":"在windows下如何安装nginx","date":"2020-08-15T09:23:39.978Z","updated":"2020-08-15T12:28:27.168Z","comments":true,"path":"2020/08/15/在windows下如何安装nginx/","link":"","permalink":"https://dinglakers.github.io/2020/08/15/%E5%9C%A8windows%E4%B8%8B%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85nginx/","excerpt":"","text":"#在windows下如何安装nginx# 第一步：1、下载安装：http://nginx.org/en/download.html 2、解压所下载的压缩包，并记住解压路径； 3、打开控制台（cmd），进入Nginx安装包根路径； 4、输入命令nginx -t检查nginx是否配置成功； 5、显示端口被占，找到conf/nginx.conf，使用Notepad++打开（不推荐windows自带的notpad，乱码风险），修改80为8090（其它的吉祥数作为端口，别和人冲突就行） 6、在浏览器中访问localhost：8090，便可看到nginx成功安装并运行的页面。 二、运行1、检查配置文件是否配置成功，在启动服务之前执行； nginx -t2、启动运行nginx服务； start nginx3、等任务完成之后，关闭Nginx服务； nginx -s quit4、强制关闭Nginx服务； nginx -s stop5、重启Nginx服务，一般是修改了配置文件之后，使修改生效； nginx -s reload三、配置文件Nginx所有的设置都在根目录conf文件夹下的nginx.conf文件中。 在网上看到，不要以记事本来打开conf配置文件，会发生转码问题，破坏配置文件的内容，从而导致Nginx启动不起来。我用Notepad++打开修改的，没有问题。 1、worker_processes： 设定Nginx工作时的进程数，设置值小于cpu的内核数； worker_processes 1;2、events： events { # 设置nginx的最大连接数 worker_connections 1024; }3、keepalive_timeout： http连接超时时间，默认是65s。当需要上传大文件时，需要适当设置大一点，避免文件上传过程中断开连接，导致文件上传失败； keepalive_timeout 5000;4、gzip： 对网络传输的数据内容进行压缩； gzip on;5、upstream： 服务器的集群。可以设定多个不同名字的集群，以用于不同的server。这里可以设定nginx的工作策略，这里是使用默认的轮询； # 服务器的集群 upstream localhost { #服务器集群名字 server 192.168.100.31:8801; server 192.168.100.32:8802; server 192.168.100.33:8803 down; server 192.168.100.34:8804 backup; }注：upstream中的每个server都可以设定以下状态： weight-设定该服务的访问权重，权重越大被访问的几率越大，相应的压力就越大； down- 表示此server不参与负载； max_fails -允许请求失败的最大次数(当超过后返回proxy_next_upstream中定义的的错误)； fail_timeout：请求失败后暂停访问的时限； backup：备用server；当其他机器全忙或宕机时，才会使用。 6、server： 代理服务器，可以设定多个代理服务器(每一个server就是一个虚拟服务器)；请求进来之后由server的server_name决定该请求访问哪一个服务； server { # 设置监听端口 listen 9876; server_name localhost; # 设置url编码格式，解决参数中文乱码问题 charset utf-8; location / { proxy_pass http://localhost; proxy_redirect default; }*7、location： * 配置该服务的访问规则，同一个server下可以配置多个location； # 对静态资源进行映射 location ^~ /public/images/ { alias D:/nginx-1.10.1/html/public/images/; } # 对&quot;/&quot;启用负载均衡 location / { proxy_pass http://localhost/; proxy_redirect default; }root-指定请求资源在服务器上的真实路径，可以写相对路径（相对于nginx安装目录）也可写绝对路径； alias-指定请求资源在服务器上的真实路径，可以写相对路径（相对于nginx安装目录）也可写绝对路径； index-指定访问主页，会在root设定目录下去找，后面可跟多个页面，依次查找，找到一个即返回；proxy_pass-设置转发访问地址； 注：root与alias的使用区别 1、root访问的资源路径为 root指定地址+location访问地址，alias访问的资源路径为 alias指定路径； # 用户访问地址：http://location/images/login.jpg # root模式下 location /images/ { root E:/public; } # 访问的资源路径为： E:/public/images/login.jpg # alias模式下 location /images/ { alias E:/public/; } # 访问的资源路径为： E:/public/login.jpg2、alias只能用于location中，但root在server、http以及location中都能使用； 3、alias后面指定路径必须以 “ / “ 结尾，是一个文件夹，但root可以不要”/“结尾。 原文链接：https://blog.csdn.net/zorro_jin/article/details/84927408 特别感谢的抄写网站：https://blog.csdn.net/zorro_jin/article/details/84927408","categories":[],"tags":[]},{"title":"Redis学习(一)","slug":"Redis学习(一)","date":"2020-07-12T12:37:22.923Z","updated":"2020-07-12T14:41:23.086Z","comments":true,"path":"2020/07/12/Redis学习(一)/","link":"","permalink":"https://dinglakers.github.io/2020/07/12/Redis%E5%AD%A6%E4%B9%A0(%E4%B8%80)/","excerpt":"","text":"#Redis学习(一)# Redis常用命令详细能容,查看网站:http://www.redis.cn 1.Redis系统常用命令:查询所有key: key * 设定过期时间: expire key time 取消过期时间: persist key 查看过期剩余时间: ttl key 查询其他数据库: select 0-15 移动key到其他库: move key 0-15 重命名: rename key newname 查询key数量: dbsize 查询数据库信息: info 查看数据库配置: config get * 清空当前数据库: flushdb 清空所有数据库: flushall 发布订阅: subscribe 订阅 publish 发布 2.Redis常用5种数据类型:String,Hash,List,Set,Zset2.1 String类型新增: set,mset,setbit ,setnx,setex,msetex,psetex 修改: append,incr,incrby,decr,decrby 查询: get,strlen,mget,getrange,bitcount 删除: del 2.2 Hash类型新增: hset,hmset,hsetnx 修改: hexists,hincrby,hincrbyfloat 查询: hget,hgetall,hkeys,hlen,hvals,hstrlen 删除: hdel 2.3 List类型新增: lset 修改: linsert key berfore, linsert key after, lpush,lpushx,rpush,rpushx 查询: lindex,llen,lrange 删除: blpop,brpop,lpop,rpop,brpoppush,lrem 2.4 Set类型新增: sadd 修改: sunion,sdiff,sinter 查询: sunionstore,sdiffstore,sinterstore,sismember,smembers 删除: smove,srem 2.5 Zset类型新增: Zadd key score member 修改: zincrby key increment member 查询: zcard key,zcount key min max,zunionstore ,zlexcount,zrange,zrank 删除: zrem,zrevrank","categories":[],"tags":[]},{"title":"发布个人博客步骤","slug":"发布个人博客步骤","date":"2020-07-12T10:38:38.185Z","updated":"2020-08-15T12:44:39.915Z","comments":true,"path":"2020/07/12/发布个人博客步骤/","link":"","permalink":"https://dinglakers.github.io/2020/07/12/%E5%8F%91%E5%B8%83%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/","excerpt":"","text":"#发布个人博客步骤# 创建.md文件,需要熟悉MarkdownPad2编辑器;熟能生巧!! 一.用 MarkdownPad2 编辑文件1.新建文档1.1手动创建在 ** \\Hexo \\ source\\ _posts ** 目录下右键鼠标新建文本文档，改后缀为 .md 即可 1.2代码创建$ hexo n &quot;文章标题&quot;2.常用命令center : 标签,将文本置中 Ctrl + I ： 斜体 Ctrl + B ： 粗体 Ctrl + G ： 图片 Ctrl + Q ： 引用 Ctrl + 1 ： 标题 1 Ctrl + 2 ： 标题 2 Ctrl + 3 ： 标题 3 Ctrl + K ： 代码块 Ctrl + L ： 超链接 Ctrl + T ： 时间戳 Ctrl + U ： 无序列表 Ctrl + R ： 水平标尺 F4 ： 启用水平布局 F5 ： 启用实时预览 F6 ： 在浏览器中预览 Ctrl + Shift + O ： 有序列表 原文链接 二.把图片存入markdown文件用base64转码工具把图片转成一段字符串，然后把字符串填到基础格式中链接的那个位置。 基础用法： ![avatar](data:image/png;base64, iVBORw0......)这个时候会发现插入的这一长串字符串会把整个文章分割开，非常影响编写文章时的体验。如果能够把大段的base64字符串放在文章末尾，然后在文章中通过一个id来调用，文章就不会被分割的这么乱了。 高级用法,比如： #base64str 图片编号,放在图片对应位置 ![avatar][base64str] #放在文档末尾 [base64str]:data:image/png;base64,后接图片编码图片存储方法,参考链接：https://www.jianshu.com/p/280c6a6f2594 base64的下载地址: https://dl.pconline.com.cn/download/1863713.html 三.字体、字号、颜色设置&lt;font face=&quot;微软雅黑&quot; &gt;微软雅黑字体&lt;/font&gt; &lt;font face=&quot;黑体&quot; &gt;黑体&lt;/font&gt; &lt;font size=3 &gt;3号字&lt;/font&gt; &lt;font size=4 &gt;4号字&lt;/font&gt; &lt;font color=#FF0000 &gt;红色&lt;/font&gt; &lt;font color=#008000 &gt;绿色&lt;/font&gt; &lt;font color=#0000FF &gt;蓝色&lt;/font&gt;上述设置显示效果如下所示： 微软雅黑字体 黑体 3号字 4号字 红色 绿色 蓝色 注意：CSDN中的blog默认字号为3号字，字号数值可设为1~7，默认字体为微软雅黑。其它颜色值可参考 CSDN-markdown编辑器语法——字体、字号与颜色 字体、字号以及颜色可在&lt;font ……中同时设置，如可对文字“微软雅黑字体”设置格式：微软雅黑字体 &lt;font face=&quot;微软雅黑&quot; size=6 color=#FF0000 &gt;微软雅黑字体&lt;/font&gt;三.上传文件1.本地查看效果在自己的博客文件夹右键鼠标，点击 Git Bash Here 执行以下命令，执行完即可登录 http://localhost:4000/ 查看效果 $ hexo generate $ hexo server2.把文件推送到服务器上$ hexo g $ hexo d或者简写为: $ hexo d -g3.远程访问,查看在线效果","categories":[],"tags":[]},{"title":"springboot开发技巧","slug":"springboot开发技巧","date":"2020-06-14T08:14:29.146Z","updated":"2020-06-14T08:34:25.115Z","comments":true,"path":"2020/06/14/springboot开发技巧/","link":"","permalink":"https://dinglakers.github.io/2020/06/14/springboot%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/","excerpt":"","text":"Springboot开发工程中的技巧 ##1.模板引擎页面修改以后,要实时生效: ###1.1 禁用模板引擎的缓存,在application.properties文件中,写以下代码: #禁用缓存 spring.thymeleaf.cache=false ###1.2 页面修改完成后,点 Ctrl + F9 ,重新编译. ##2.测试","categories":[],"tags":[]},{"title":"hexo更换主题时css效果不显示","slug":"hexo更换主题时css效果不显示","date":"2020-06-14T03:41:53.605Z","updated":"2020-06-14T08:28:57.556Z","comments":true,"path":"2020/06/14/hexo更换主题时css效果不显示/","link":"","permalink":"https://dinglakers.github.io/2020/06/14/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E6%97%B6css%E6%95%88%E6%9E%9C%E4%B8%8D%E6%98%BE%E7%A4%BA/","excerpt":"","text":"更换hexo主题时出现css样式不出现效果解决办法: 1.选择合适的主题,多试几个 2.更改_config.yml文件中的url 和 root url: https://dinglakers.github.io root: /fishers/ 3.更改theme标签 theme: hexo-theme-fluid //注意:theme:后有一个空格 4.修改完成后,依次执行下面的代码 //清除缓存 hexo clean hexo g //在本地启动 hexo s然后,点击本地地址,查看效果","categories":[],"tags":[]},{"title":"test001","slug":"test001","date":"2020-06-06T07:48:12.060Z","updated":"2020-06-06T07:48:12.336Z","comments":true,"path":"2020/06/06/test001/","link":"","permalink":"https://dinglakers.github.io/2020/06/06/test001/","excerpt":"","text":"remote connect test","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-06-05T16:29:07.566Z","updated":"2020-06-05T16:29:07.566Z","comments":true,"path":"2020/06/06/hello-world/","link":"","permalink":"https://dinglakers.github.io/2020/06/06/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}